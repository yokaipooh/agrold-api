# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WebserviceParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, _in: str=None, name: str=None, description: str=None, type: str=None, enum: List[str]=None, required: bool=None):  # noqa: E501
        """WebserviceParameters - a model defined in Swagger

        :param _in: The _in of this WebserviceParameters.  # noqa: E501
        :type _in: str
        :param name: The name of this WebserviceParameters.  # noqa: E501
        :type name: str
        :param description: The description of this WebserviceParameters.  # noqa: E501
        :type description: str
        :param type: The type of this WebserviceParameters.  # noqa: E501
        :type type: str
        :param enum: The enum of this WebserviceParameters.  # noqa: E501
        :type enum: List[str]
        :param required: The required of this WebserviceParameters.  # noqa: E501
        :type required: bool
        """
        self.swagger_types = {
            '_in': str,
            'name': str,
            'description': str,
            'type': str,
            'enum': List[str],
            'required': bool
        }

        self.attribute_map = {
            '_in': 'in',
            'name': 'name',
            'description': 'description',
            'type': 'type',
            'enum': 'enum',
            'required': 'required'
        }

        self.__in = _in
        self._name = name
        self._description = description
        self._type = type
        self._enum = enum
        self._required = required

    @classmethod
    def from_dict(cls, dikt) -> 'WebserviceParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The webservice_parameters of this WebserviceParameters.  # noqa: E501
        :rtype: WebserviceParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _in(self) -> str:
        """Gets the _in of this WebserviceParameters.


        :return: The _in of this WebserviceParameters.
        :rtype: str
        """
        return self.__in

    @_in.setter
    def _in(self, _in: str):
        """Sets the _in of this WebserviceParameters.


        :param _in: The _in of this WebserviceParameters.
        :type _in: str
        """
        if _in is None:
            raise ValueError("Invalid value for `_in`, must not be `None`")  # noqa: E501

        self.__in = _in

    @property
    def name(self) -> str:
        """Gets the name of this WebserviceParameters.


        :return: The name of this WebserviceParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this WebserviceParameters.


        :param name: The name of this WebserviceParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this WebserviceParameters.


        :return: The description of this WebserviceParameters.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this WebserviceParameters.


        :param description: The description of this WebserviceParameters.
        :type description: str
        """

        self._description = description

    @property
    def type(self) -> str:
        """Gets the type of this WebserviceParameters.


        :return: The type of this WebserviceParameters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this WebserviceParameters.


        :param type: The type of this WebserviceParameters.
        :type type: str
        """

        self._type = type

    @property
    def enum(self) -> List[str]:
        """Gets the enum of this WebserviceParameters.


        :return: The enum of this WebserviceParameters.
        :rtype: List[str]
        """
        return self._enum

    @enum.setter
    def enum(self, enum: List[str]):
        """Sets the enum of this WebserviceParameters.


        :param enum: The enum of this WebserviceParameters.
        :type enum: List[str]
        """

        self._enum = enum

    @property
    def required(self) -> bool:
        """Gets the required of this WebserviceParameters.


        :return: The required of this WebserviceParameters.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required: bool):
        """Sets the required of this WebserviceParameters.


        :param required: The required of this WebserviceParameters.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")  # noqa: E501

        self._required = required
