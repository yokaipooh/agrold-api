# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util
from swagger_server.models.webservice_parameters import WebserviceParameters


class Webservice(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, summary: str=None, produces: List[str]=None, description: str=None, operation_id: str=None, responses: Dict[str, object]=None, sparql: str=None, parameters: List[WebserviceParameters]=None, tags: List[str]=None):  # noqa: E501
        """Webservice - a model defined in Swagger

        :param summary: The summary of this Webservice.  # noqa: E501
        :type summary: str
        :param produces: The produces of this Webservice.  # noqa: E501
        :type produces: List[str]
        :param description: The description of this Webservice.  # noqa: E501
        :type description: str
        :param operation_id: The operation_id of this Webservice.  # noqa: E501
        :type operation_id: str
        :param responses: The responses of this Webservice.  # noqa: E501
        :type responses: Dict[str, object]
        :param sparql: The sparql of this Webservice.  # noqa: E501
        :type sparql: str
        :param parameters: The parameters of this Webservice.  # noqa: E501
        :type parameters: List[WebserviceParameters]
        :param tags: The tags of this Webservice.  # noqa: E501
        :type tags: List[str]
        """
        self.swagger_types = {
            'summary': str,
            'produces': List[str],
            'description': str,
            'operation_id': str,
            'responses': Dict[str, object],
            'sparql': str,
            'parameters': List[WebserviceParameters],
            'tags': List[str]
        }

        self.attribute_map = {
            'summary': 'summary',
            'produces': 'produces',
            'description': 'description',
            'operation_id': 'operationId',
            'responses': 'responses',
            'sparql': 'sparql',
            'parameters': 'parameters',
            'tags': 'tags'
        }

        self._summary = summary
        self._produces = produces
        self._description = description
        self._operation_id = operation_id
        self._responses = responses
        self._sparql = sparql
        self._parameters = parameters
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Webservice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The webservice of this Webservice.  # noqa: E501
        :rtype: Webservice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def summary(self) -> str:
        """Gets the summary of this Webservice.


        :return: The summary of this Webservice.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary: str):
        """Sets the summary of this Webservice.


        :param summary: The summary of this Webservice.
        :type summary: str
        """

        self._summary = summary

    @property
    def produces(self) -> List[str]:
        """Gets the produces of this Webservice.


        :return: The produces of this Webservice.
        :rtype: List[str]
        """
        return self._produces

    @produces.setter
    def produces(self, produces: List[str]):
        """Sets the produces of this Webservice.


        :param produces: The produces of this Webservice.
        :type produces: List[str]
        """

        self._produces = produces

    @property
    def description(self) -> str:
        """Gets the description of this Webservice.


        :return: The description of this Webservice.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Webservice.


        :param description: The description of this Webservice.
        :type description: str
        """

        self._description = description

    @property
    def operation_id(self) -> str:
        """Gets the operation_id of this Webservice.


        :return: The operation_id of this Webservice.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id: str):
        """Sets the operation_id of this Webservice.


        :param operation_id: The operation_id of this Webservice.
        :type operation_id: str
        """
        if operation_id is None:
            raise ValueError("Invalid value for `operation_id`, must not be `None`")  # noqa: E501

        self._operation_id = operation_id

    @property
    def responses(self) -> Dict[str, object]:
        """Gets the responses of this Webservice.


        :return: The responses of this Webservice.
        :rtype: Dict[str, object]
        """
        return self._responses

    @responses.setter
    def responses(self, responses: Dict[str, object]):
        """Sets the responses of this Webservice.


        :param responses: The responses of this Webservice.
        :type responses: Dict[str, object]
        """
        if responses is None:
            raise ValueError("Invalid value for `responses`, must not be `None`")  # noqa: E501

        self._responses = responses

    @property
    def sparql(self) -> str:
        """Gets the sparql of this Webservice.


        :return: The sparql of this Webservice.
        :rtype: str
        """
        return self._sparql

    @sparql.setter
    def sparql(self, sparql: str):
        """Sets the sparql of this Webservice.


        :param sparql: The sparql of this Webservice.
        :type sparql: str
        """
        if sparql is None:
            raise ValueError("Invalid value for `sparql`, must not be `None`")  # noqa: E501

        self._sparql = sparql

    @property
    def parameters(self) -> List[WebserviceParameters]:
        """Gets the parameters of this Webservice.


        :return: The parameters of this Webservice.
        :rtype: List[WebserviceParameters]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[WebserviceParameters]):
        """Sets the parameters of this Webservice.


        :param parameters: The parameters of this Webservice.
        :type parameters: List[WebserviceParameters]
        """

        self._parameters = parameters

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Webservice.


        :return: The tags of this Webservice.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Webservice.


        :param tags: The tags of this Webservice.
        :type tags: List[str]
        """

        self._tags = tags
